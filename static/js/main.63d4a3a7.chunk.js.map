{"version":3,"sources":["utils/useStats.js","components/Stats.js","components/CountrySelector.js","App.js","serviceWorker.js","index.js"],"names":["useStats","url","useState","stats","setStats","loading","setLoading","error","setError","useEffect","a","console","log","fetch","then","res","json","catch","err","data","message","fetchData","Stats","style","color","textAlign","fontSize","Grid","container","spacing","item","xs","className","confirmed","value","Paper","deaths","recovered","CountrySelector","countries","selectedCountry","setSelectedCountry","display","flexDirection","Select","labelId","id","onChange","e","target","margin","fontWeight","Object","entries","map","country","code","MenuItem","key","iso3","App","Container","maxWidth","backgroundColor","padding","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.63d4a3a7.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nexport default function useStats(url) {\r\n  const [stats, setStats] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState();\r\n  useEffect(() => {\r\n    console.log(\"Mounting or updating\");\r\n    async function fetchData() {\r\n      setLoading(true);\r\n      setError();\r\n      console.log(\"Fetching Data\");\r\n      const data = await fetch(url)\r\n        .then(res => res.json())\r\n        .catch(err => {\r\n          setError(err);\r\n        });\r\n      if (data.error) {\r\n        setError(data.error.message);\r\n        setStats([]);\r\n      } else {\r\n        setStats(data);\r\n      }\r\n      setLoading(false);\r\n    }\r\n    fetchData();\r\n  }, [url]);\r\n  return {\r\n    stats,\r\n    loading,\r\n    error\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport useStats from \"../utils/useStats\";\r\nimport { Grid, Paper, Container } from \"@material-ui/core\";\r\n\r\nexport default function Stats({ url }) {\r\n  const { stats, loading, error } = useStats(url);\r\n  console.log(stats, loading, error);\r\n  if (loading)\r\n    return (\r\n      <p style={{ color: \"white\", textAlign: \"center\", fontSize: 20 }}>\r\n        Loading...\r\n      </p>\r\n    );\r\n  if (error)\r\n    return (\r\n      <p style={{ color: \"white\", textAlign: \"center\", fontSize: 20 }}>\r\n        No data found for this Country.\r\n      </p>\r\n    );\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={4}>\r\n        <div className=\"gridContent\">\r\n          <h3>Confirmed</h3>\r\n          <span>{stats.confirmed.value}</span>\r\n        </div>\r\n        <Paper></Paper>\r\n      </Grid>\r\n      <Grid item xs={4}>\r\n        <div className=\"gridContent\">\r\n          <h3>Deaths</h3>\r\n          <span>{stats.deaths.value}</span>\r\n        </div>\r\n        <Paper></Paper>\r\n      </Grid>\r\n      <Grid item xs={4}>\r\n        <div className=\"gridContent\">\r\n          <h3>Recovered</h3>\r\n          <span>{stats.recovered.value}</span>\r\n        </div>\r\n        <Paper></Paper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport useStats from \"../utils/useStats\";\r\nimport Stats from \"./Stats\";\r\nimport { Select, MenuItem } from \"@material-ui/core\";\r\n\r\nexport default function CountrySelector() {\r\n  const { stats: countries, loading, error } = useStats(\r\n    \"https://covid19.mathdro.id/api/countries\"\r\n  );\r\n  const [selectedCountry, setSelectedCountry] = useState(\"PAK\");\r\n  if (loading)\r\n    return (\r\n      <p style={{ color: \"white\", textAlign: \"center\", fontSize: 20 }}>\r\n        Loading...\r\n      </p>\r\n    );\r\n  if (error)\r\n    return (\r\n      <p style={{ color: \"white\", textAlign: \"center\", fontSize: 20 }}>\r\n        Error...\r\n      </p>\r\n    );\r\n\r\n  return (\r\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n      <h1 style={{ color: \"#ffffff\", textAlign: \"center\" }}>\r\n        Currently Showing from {selectedCountry}\r\n      </h1>\r\n      <Select\r\n        labelId=\"demo-simple-select-label\"\r\n        id=\"demo-simple-select\"\r\n        value={selectedCountry}\r\n        onChange={e => {\r\n          setSelectedCountry(e.target.value);\r\n        }}\r\n        style={{\r\n          margin: \"2rem\",\r\n          color: \"#ffffff\",\r\n          fontSize: 25,\r\n          fontWeight: \"bold\"\r\n        }}\r\n      >\r\n        {Object.entries(countries.countries).map(([country, code]) => (\r\n          <MenuItem key={code} value={countries.iso3[code]}>\r\n            {country}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n      {!error && (\r\n        <Stats\r\n          url={`https://covid19.mathdro.id/api/countries/${selectedCountry}`}\r\n        ></Stats>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Stats from \"./components/Stats\";\nimport CountrySelector from \"./components/CountrySelector\";\nimport Container from \"@material-ui/core/Container\";\n\nfunction App() {\n  return (\n    <Container\n      maxWidth=\"xl\"\n      style={{ backgroundColor: \"#008fff\", padding: \"2rem\" }}\n    >\n      <h1 style={{ color: \"#ffffff\", textAlign: \"center\" }}>Global Cases</h1>\n      <Stats url={\"https://covid19.mathdro.id/api\"} />\n      <CountrySelector />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}